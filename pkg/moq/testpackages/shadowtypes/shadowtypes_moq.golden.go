// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package shadowtypes

import (
	"github.com/matryer/moq/pkg/moq/testpackages/shadowtypes/types"
	"sync"
)

// Ensure, that ShadowTypesMock does implement ShadowTypes.
// If this is not the case, regenerate this file with moq.
var _ ShadowTypes = &ShadowTypesMock{}

// ShadowTypesMock is a mock implementation of ShadowTypes.
//
//	func TestSomethingThatUsesShadowTypes(t *testing.T) {
//
//		// make and configure a mocked ShadowTypes
//		mockedShadowTypes := &ShadowTypesMock{
//			ShadowBoolFunc: func(b bool, boolMoqParam types.Bool)  {
//				panic("mock out the ShadowBool method")
//			},
//			ShadowByteFunc: func(v byte, byteMoqParam types.Byte)  {
//				panic("mock out the ShadowByte method")
//			},
//			ShadowComplex128Func: func(v complex128, complex128MoqParam types.Complex128)  {
//				panic("mock out the ShadowComplex128 method")
//			},
//			ShadowComplex64Func: func(v complex64, complex64MoqParam types.Complex64)  {
//				panic("mock out the ShadowComplex64 method")
//			},
//			ShadowFloat32Func: func(f float32, float32MoqParam types.Float32)  {
//				panic("mock out the ShadowFloat32 method")
//			},
//			ShadowFloat64Func: func(f float64, float64MoqParam types.Float64)  {
//				panic("mock out the ShadowFloat64 method")
//			},
//			ShadowIntFunc: func(n int, intMoqParam types.Int)  {
//				panic("mock out the ShadowInt method")
//			},
//			ShadowInt16Func: func(n int16, int16MoqParam types.Int16)  {
//				panic("mock out the ShadowInt16 method")
//			},
//			ShadowInt32Func: func(n int32, int32MoqParam types.Int32)  {
//				panic("mock out the ShadowInt32 method")
//			},
//			ShadowInt64Func: func(n int64, int64MoqParam types.Int64)  {
//				panic("mock out the ShadowInt64 method")
//			},
//			ShadowInt8Func: func(n int8, int8MoqParam types.Int8)  {
//				panic("mock out the ShadowInt8 method")
//			},
//			ShadowRuneFunc: func(n rune, runeMoqParam types.Rune)  {
//				panic("mock out the ShadowRune method")
//			},
//			ShadowStringFunc: func(s string, stringMoqParam types.String)  {
//				panic("mock out the ShadowString method")
//			},
//			ShadowUintFunc: func(v uint, uintMoqParam types.Uint)  {
//				panic("mock out the ShadowUint method")
//			},
//			ShadowUint16Func: func(v uint16, uint16MoqParam types.Uint16)  {
//				panic("mock out the ShadowUint16 method")
//			},
//			ShadowUint32Func: func(v uint32, uint32MoqParam types.Uint32)  {
//				panic("mock out the ShadowUint32 method")
//			},
//			ShadowUint64Func: func(v uint64, uint64MoqParam types.Uint64)  {
//				panic("mock out the ShadowUint64 method")
//			},
//			ShadowUint8Func: func(v uint8, uint8MoqParam types.Uint8)  {
//				panic("mock out the ShadowUint8 method")
//			},
//			ShadowUintptrFunc: func(v uintptr, uintptrMoqParam types.Uintptr)  {
//				panic("mock out the ShadowUintptr method")
//			},
//		}
//
//		// use mockedShadowTypes in code that requires ShadowTypes
//		// and then make assertions.
//
//	}
type ShadowTypesMock struct {
	// ShadowBoolFunc mocks the ShadowBool method.
	ShadowBoolFunc func(b bool, boolMoqParam types.Bool)

	// ShadowByteFunc mocks the ShadowByte method.
	ShadowByteFunc func(v byte, byteMoqParam types.Byte)

	// ShadowComplex128Func mocks the ShadowComplex128 method.
	ShadowComplex128Func func(v complex128, complex128MoqParam types.Complex128)

	// ShadowComplex64Func mocks the ShadowComplex64 method.
	ShadowComplex64Func func(v complex64, complex64MoqParam types.Complex64)

	// ShadowFloat32Func mocks the ShadowFloat32 method.
	ShadowFloat32Func func(f float32, float32MoqParam types.Float32)

	// ShadowFloat64Func mocks the ShadowFloat64 method.
	ShadowFloat64Func func(f float64, float64MoqParam types.Float64)

	// ShadowIntFunc mocks the ShadowInt method.
	ShadowIntFunc func(n int, intMoqParam types.Int)

	// ShadowInt16Func mocks the ShadowInt16 method.
	ShadowInt16Func func(n int16, int16MoqParam types.Int16)

	// ShadowInt32Func mocks the ShadowInt32 method.
	ShadowInt32Func func(n int32, int32MoqParam types.Int32)

	// ShadowInt64Func mocks the ShadowInt64 method.
	ShadowInt64Func func(n int64, int64MoqParam types.Int64)

	// ShadowInt8Func mocks the ShadowInt8 method.
	ShadowInt8Func func(n int8, int8MoqParam types.Int8)

	// ShadowRuneFunc mocks the ShadowRune method.
	ShadowRuneFunc func(n rune, runeMoqParam types.Rune)

	// ShadowStringFunc mocks the ShadowString method.
	ShadowStringFunc func(s string, stringMoqParam types.String)

	// ShadowUintFunc mocks the ShadowUint method.
	ShadowUintFunc func(v uint, uintMoqParam types.Uint)

	// ShadowUint16Func mocks the ShadowUint16 method.
	ShadowUint16Func func(v uint16, uint16MoqParam types.Uint16)

	// ShadowUint32Func mocks the ShadowUint32 method.
	ShadowUint32Func func(v uint32, uint32MoqParam types.Uint32)

	// ShadowUint64Func mocks the ShadowUint64 method.
	ShadowUint64Func func(v uint64, uint64MoqParam types.Uint64)

	// ShadowUint8Func mocks the ShadowUint8 method.
	ShadowUint8Func func(v uint8, uint8MoqParam types.Uint8)

	// ShadowUintptrFunc mocks the ShadowUintptr method.
	ShadowUintptrFunc func(v uintptr, uintptrMoqParam types.Uintptr)

	// calls tracks calls to the methods.
	calls struct {
		// ShadowTypesMockShadowBoolCall holds details about calls to the ShadowBool method.
		ShadowBool []ShadowTypesMockShadowBoolCall
		// ShadowTypesMockShadowByteCall holds details about calls to the ShadowByte method.
		ShadowByte []ShadowTypesMockShadowByteCall
		// ShadowTypesMockShadowComplex128Call holds details about calls to the ShadowComplex128 method.
		ShadowComplex128 []ShadowTypesMockShadowComplex128Call
		// ShadowTypesMockShadowComplex64Call holds details about calls to the ShadowComplex64 method.
		ShadowComplex64 []ShadowTypesMockShadowComplex64Call
		// ShadowTypesMockShadowFloat32Call holds details about calls to the ShadowFloat32 method.
		ShadowFloat32 []ShadowTypesMockShadowFloat32Call
		// ShadowTypesMockShadowFloat64Call holds details about calls to the ShadowFloat64 method.
		ShadowFloat64 []ShadowTypesMockShadowFloat64Call
		// ShadowTypesMockShadowIntCall holds details about calls to the ShadowInt method.
		ShadowInt []ShadowTypesMockShadowIntCall
		// ShadowTypesMockShadowInt16Call holds details about calls to the ShadowInt16 method.
		ShadowInt16 []ShadowTypesMockShadowInt16Call
		// ShadowTypesMockShadowInt32Call holds details about calls to the ShadowInt32 method.
		ShadowInt32 []ShadowTypesMockShadowInt32Call
		// ShadowTypesMockShadowInt64Call holds details about calls to the ShadowInt64 method.
		ShadowInt64 []ShadowTypesMockShadowInt64Call
		// ShadowTypesMockShadowInt8Call holds details about calls to the ShadowInt8 method.
		ShadowInt8 []ShadowTypesMockShadowInt8Call
		// ShadowTypesMockShadowRuneCall holds details about calls to the ShadowRune method.
		ShadowRune []ShadowTypesMockShadowRuneCall
		// ShadowTypesMockShadowStringCall holds details about calls to the ShadowString method.
		ShadowString []ShadowTypesMockShadowStringCall
		// ShadowTypesMockShadowUintCall holds details about calls to the ShadowUint method.
		ShadowUint []ShadowTypesMockShadowUintCall
		// ShadowTypesMockShadowUint16Call holds details about calls to the ShadowUint16 method.
		ShadowUint16 []ShadowTypesMockShadowUint16Call
		// ShadowTypesMockShadowUint32Call holds details about calls to the ShadowUint32 method.
		ShadowUint32 []ShadowTypesMockShadowUint32Call
		// ShadowTypesMockShadowUint64Call holds details about calls to the ShadowUint64 method.
		ShadowUint64 []ShadowTypesMockShadowUint64Call
		// ShadowTypesMockShadowUint8Call holds details about calls to the ShadowUint8 method.
		ShadowUint8 []ShadowTypesMockShadowUint8Call
		// ShadowTypesMockShadowUintptrCall holds details about calls to the ShadowUintptr method.
		ShadowUintptr []ShadowTypesMockShadowUintptrCall
	}
	lockShadowBool       sync.RWMutex
	lockShadowByte       sync.RWMutex
	lockShadowComplex128 sync.RWMutex
	lockShadowComplex64  sync.RWMutex
	lockShadowFloat32    sync.RWMutex
	lockShadowFloat64    sync.RWMutex
	lockShadowInt        sync.RWMutex
	lockShadowInt16      sync.RWMutex
	lockShadowInt32      sync.RWMutex
	lockShadowInt64      sync.RWMutex
	lockShadowInt8       sync.RWMutex
	lockShadowRune       sync.RWMutex
	lockShadowString     sync.RWMutex
	lockShadowUint       sync.RWMutex
	lockShadowUint16     sync.RWMutex
	lockShadowUint32     sync.RWMutex
	lockShadowUint64     sync.RWMutex
	lockShadowUint8      sync.RWMutex
	lockShadowUintptr    sync.RWMutex
}

// ShadowBool calls ShadowBoolFunc.
func (mock *ShadowTypesMock) ShadowBool(b bool, boolMoqParam types.Bool) {
	if mock.ShadowBoolFunc == nil {
		panic("ShadowTypesMock.ShadowBoolFunc: method is nil but ShadowTypes.ShadowBool was just called")
	}
	callInfo := ShadowTypesMockShadowBoolCall{
		B:            b,
		BoolMoqParam: boolMoqParam,
	}
	mock.lockShadowBool.Lock()
	mock.calls.ShadowBool = append(mock.calls.ShadowBool, callInfo)
	mock.lockShadowBool.Unlock()
	mock.ShadowBoolFunc(b, boolMoqParam)
}

// ShadowTypesMockShadowBoolCall holds details about calls to the ShadowBool method.
type ShadowTypesMockShadowBoolCall struct {
	// B is the b argument value.
	B bool
	// BoolMoqParam is the boolMoqParam argument value.
	BoolMoqParam types.Bool
}

// ShadowBoolCalls gets all the calls that were made to ShadowBool.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowBoolCalls())
func (mock *ShadowTypesMock) ShadowBoolCalls() []ShadowTypesMockShadowBoolCall {
	var calls []ShadowTypesMockShadowBoolCall
	mock.lockShadowBool.RLock()
	calls = mock.calls.ShadowBool
	mock.lockShadowBool.RUnlock()
	return calls
}

// ShadowByte calls ShadowByteFunc.
func (mock *ShadowTypesMock) ShadowByte(v byte, byteMoqParam types.Byte) {
	if mock.ShadowByteFunc == nil {
		panic("ShadowTypesMock.ShadowByteFunc: method is nil but ShadowTypes.ShadowByte was just called")
	}
	callInfo := ShadowTypesMockShadowByteCall{
		V:            v,
		ByteMoqParam: byteMoqParam,
	}
	mock.lockShadowByte.Lock()
	mock.calls.ShadowByte = append(mock.calls.ShadowByte, callInfo)
	mock.lockShadowByte.Unlock()
	mock.ShadowByteFunc(v, byteMoqParam)
}

// ShadowTypesMockShadowByteCall holds details about calls to the ShadowByte method.
type ShadowTypesMockShadowByteCall struct {
	// V is the v argument value.
	V byte
	// ByteMoqParam is the byteMoqParam argument value.
	ByteMoqParam types.Byte
}

// ShadowByteCalls gets all the calls that were made to ShadowByte.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowByteCalls())
func (mock *ShadowTypesMock) ShadowByteCalls() []ShadowTypesMockShadowByteCall {
	var calls []ShadowTypesMockShadowByteCall
	mock.lockShadowByte.RLock()
	calls = mock.calls.ShadowByte
	mock.lockShadowByte.RUnlock()
	return calls
}

// ShadowComplex128 calls ShadowComplex128Func.
func (mock *ShadowTypesMock) ShadowComplex128(v complex128, complex128MoqParam types.Complex128) {
	if mock.ShadowComplex128Func == nil {
		panic("ShadowTypesMock.ShadowComplex128Func: method is nil but ShadowTypes.ShadowComplex128 was just called")
	}
	callInfo := ShadowTypesMockShadowComplex128Call{
		V:                  v,
		Complex128MoqParam: complex128MoqParam,
	}
	mock.lockShadowComplex128.Lock()
	mock.calls.ShadowComplex128 = append(mock.calls.ShadowComplex128, callInfo)
	mock.lockShadowComplex128.Unlock()
	mock.ShadowComplex128Func(v, complex128MoqParam)
}

// ShadowTypesMockShadowComplex128Call holds details about calls to the ShadowComplex128 method.
type ShadowTypesMockShadowComplex128Call struct {
	// V is the v argument value.
	V complex128
	// Complex128MoqParam is the complex128MoqParam argument value.
	Complex128MoqParam types.Complex128
}

// ShadowComplex128Calls gets all the calls that were made to ShadowComplex128.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowComplex128Calls())
func (mock *ShadowTypesMock) ShadowComplex128Calls() []ShadowTypesMockShadowComplex128Call {
	var calls []ShadowTypesMockShadowComplex128Call
	mock.lockShadowComplex128.RLock()
	calls = mock.calls.ShadowComplex128
	mock.lockShadowComplex128.RUnlock()
	return calls
}

// ShadowComplex64 calls ShadowComplex64Func.
func (mock *ShadowTypesMock) ShadowComplex64(v complex64, complex64MoqParam types.Complex64) {
	if mock.ShadowComplex64Func == nil {
		panic("ShadowTypesMock.ShadowComplex64Func: method is nil but ShadowTypes.ShadowComplex64 was just called")
	}
	callInfo := ShadowTypesMockShadowComplex64Call{
		V:                 v,
		Complex64MoqParam: complex64MoqParam,
	}
	mock.lockShadowComplex64.Lock()
	mock.calls.ShadowComplex64 = append(mock.calls.ShadowComplex64, callInfo)
	mock.lockShadowComplex64.Unlock()
	mock.ShadowComplex64Func(v, complex64MoqParam)
}

// ShadowTypesMockShadowComplex64Call holds details about calls to the ShadowComplex64 method.
type ShadowTypesMockShadowComplex64Call struct {
	// V is the v argument value.
	V complex64
	// Complex64MoqParam is the complex64MoqParam argument value.
	Complex64MoqParam types.Complex64
}

// ShadowComplex64Calls gets all the calls that were made to ShadowComplex64.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowComplex64Calls())
func (mock *ShadowTypesMock) ShadowComplex64Calls() []ShadowTypesMockShadowComplex64Call {
	var calls []ShadowTypesMockShadowComplex64Call
	mock.lockShadowComplex64.RLock()
	calls = mock.calls.ShadowComplex64
	mock.lockShadowComplex64.RUnlock()
	return calls
}

// ShadowFloat32 calls ShadowFloat32Func.
func (mock *ShadowTypesMock) ShadowFloat32(f float32, float32MoqParam types.Float32) {
	if mock.ShadowFloat32Func == nil {
		panic("ShadowTypesMock.ShadowFloat32Func: method is nil but ShadowTypes.ShadowFloat32 was just called")
	}
	callInfo := ShadowTypesMockShadowFloat32Call{
		F:               f,
		Float32MoqParam: float32MoqParam,
	}
	mock.lockShadowFloat32.Lock()
	mock.calls.ShadowFloat32 = append(mock.calls.ShadowFloat32, callInfo)
	mock.lockShadowFloat32.Unlock()
	mock.ShadowFloat32Func(f, float32MoqParam)
}

// ShadowTypesMockShadowFloat32Call holds details about calls to the ShadowFloat32 method.
type ShadowTypesMockShadowFloat32Call struct {
	// F is the f argument value.
	F float32
	// Float32MoqParam is the float32MoqParam argument value.
	Float32MoqParam types.Float32
}

// ShadowFloat32Calls gets all the calls that were made to ShadowFloat32.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowFloat32Calls())
func (mock *ShadowTypesMock) ShadowFloat32Calls() []ShadowTypesMockShadowFloat32Call {
	var calls []ShadowTypesMockShadowFloat32Call
	mock.lockShadowFloat32.RLock()
	calls = mock.calls.ShadowFloat32
	mock.lockShadowFloat32.RUnlock()
	return calls
}

// ShadowFloat64 calls ShadowFloat64Func.
func (mock *ShadowTypesMock) ShadowFloat64(f float64, float64MoqParam types.Float64) {
	if mock.ShadowFloat64Func == nil {
		panic("ShadowTypesMock.ShadowFloat64Func: method is nil but ShadowTypes.ShadowFloat64 was just called")
	}
	callInfo := ShadowTypesMockShadowFloat64Call{
		F:               f,
		Float64MoqParam: float64MoqParam,
	}
	mock.lockShadowFloat64.Lock()
	mock.calls.ShadowFloat64 = append(mock.calls.ShadowFloat64, callInfo)
	mock.lockShadowFloat64.Unlock()
	mock.ShadowFloat64Func(f, float64MoqParam)
}

// ShadowTypesMockShadowFloat64Call holds details about calls to the ShadowFloat64 method.
type ShadowTypesMockShadowFloat64Call struct {
	// F is the f argument value.
	F float64
	// Float64MoqParam is the float64MoqParam argument value.
	Float64MoqParam types.Float64
}

// ShadowFloat64Calls gets all the calls that were made to ShadowFloat64.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowFloat64Calls())
func (mock *ShadowTypesMock) ShadowFloat64Calls() []ShadowTypesMockShadowFloat64Call {
	var calls []ShadowTypesMockShadowFloat64Call
	mock.lockShadowFloat64.RLock()
	calls = mock.calls.ShadowFloat64
	mock.lockShadowFloat64.RUnlock()
	return calls
}

// ShadowInt calls ShadowIntFunc.
func (mock *ShadowTypesMock) ShadowInt(n int, intMoqParam types.Int) {
	if mock.ShadowIntFunc == nil {
		panic("ShadowTypesMock.ShadowIntFunc: method is nil but ShadowTypes.ShadowInt was just called")
	}
	callInfo := ShadowTypesMockShadowIntCall{
		N:           n,
		IntMoqParam: intMoqParam,
	}
	mock.lockShadowInt.Lock()
	mock.calls.ShadowInt = append(mock.calls.ShadowInt, callInfo)
	mock.lockShadowInt.Unlock()
	mock.ShadowIntFunc(n, intMoqParam)
}

// ShadowTypesMockShadowIntCall holds details about calls to the ShadowInt method.
type ShadowTypesMockShadowIntCall struct {
	// N is the n argument value.
	N int
	// IntMoqParam is the intMoqParam argument value.
	IntMoqParam types.Int
}

// ShadowIntCalls gets all the calls that were made to ShadowInt.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowIntCalls())
func (mock *ShadowTypesMock) ShadowIntCalls() []ShadowTypesMockShadowIntCall {
	var calls []ShadowTypesMockShadowIntCall
	mock.lockShadowInt.RLock()
	calls = mock.calls.ShadowInt
	mock.lockShadowInt.RUnlock()
	return calls
}

// ShadowInt16 calls ShadowInt16Func.
func (mock *ShadowTypesMock) ShadowInt16(n int16, int16MoqParam types.Int16) {
	if mock.ShadowInt16Func == nil {
		panic("ShadowTypesMock.ShadowInt16Func: method is nil but ShadowTypes.ShadowInt16 was just called")
	}
	callInfo := ShadowTypesMockShadowInt16Call{
		N:             n,
		Int16MoqParam: int16MoqParam,
	}
	mock.lockShadowInt16.Lock()
	mock.calls.ShadowInt16 = append(mock.calls.ShadowInt16, callInfo)
	mock.lockShadowInt16.Unlock()
	mock.ShadowInt16Func(n, int16MoqParam)
}

// ShadowTypesMockShadowInt16Call holds details about calls to the ShadowInt16 method.
type ShadowTypesMockShadowInt16Call struct {
	// N is the n argument value.
	N int16
	// Int16MoqParam is the int16MoqParam argument value.
	Int16MoqParam types.Int16
}

// ShadowInt16Calls gets all the calls that were made to ShadowInt16.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowInt16Calls())
func (mock *ShadowTypesMock) ShadowInt16Calls() []ShadowTypesMockShadowInt16Call {
	var calls []ShadowTypesMockShadowInt16Call
	mock.lockShadowInt16.RLock()
	calls = mock.calls.ShadowInt16
	mock.lockShadowInt16.RUnlock()
	return calls
}

// ShadowInt32 calls ShadowInt32Func.
func (mock *ShadowTypesMock) ShadowInt32(n int32, int32MoqParam types.Int32) {
	if mock.ShadowInt32Func == nil {
		panic("ShadowTypesMock.ShadowInt32Func: method is nil but ShadowTypes.ShadowInt32 was just called")
	}
	callInfo := ShadowTypesMockShadowInt32Call{
		N:             n,
		Int32MoqParam: int32MoqParam,
	}
	mock.lockShadowInt32.Lock()
	mock.calls.ShadowInt32 = append(mock.calls.ShadowInt32, callInfo)
	mock.lockShadowInt32.Unlock()
	mock.ShadowInt32Func(n, int32MoqParam)
}

// ShadowTypesMockShadowInt32Call holds details about calls to the ShadowInt32 method.
type ShadowTypesMockShadowInt32Call struct {
	// N is the n argument value.
	N int32
	// Int32MoqParam is the int32MoqParam argument value.
	Int32MoqParam types.Int32
}

// ShadowInt32Calls gets all the calls that were made to ShadowInt32.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowInt32Calls())
func (mock *ShadowTypesMock) ShadowInt32Calls() []ShadowTypesMockShadowInt32Call {
	var calls []ShadowTypesMockShadowInt32Call
	mock.lockShadowInt32.RLock()
	calls = mock.calls.ShadowInt32
	mock.lockShadowInt32.RUnlock()
	return calls
}

// ShadowInt64 calls ShadowInt64Func.
func (mock *ShadowTypesMock) ShadowInt64(n int64, int64MoqParam types.Int64) {
	if mock.ShadowInt64Func == nil {
		panic("ShadowTypesMock.ShadowInt64Func: method is nil but ShadowTypes.ShadowInt64 was just called")
	}
	callInfo := ShadowTypesMockShadowInt64Call{
		N:             n,
		Int64MoqParam: int64MoqParam,
	}
	mock.lockShadowInt64.Lock()
	mock.calls.ShadowInt64 = append(mock.calls.ShadowInt64, callInfo)
	mock.lockShadowInt64.Unlock()
	mock.ShadowInt64Func(n, int64MoqParam)
}

// ShadowTypesMockShadowInt64Call holds details about calls to the ShadowInt64 method.
type ShadowTypesMockShadowInt64Call struct {
	// N is the n argument value.
	N int64
	// Int64MoqParam is the int64MoqParam argument value.
	Int64MoqParam types.Int64
}

// ShadowInt64Calls gets all the calls that were made to ShadowInt64.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowInt64Calls())
func (mock *ShadowTypesMock) ShadowInt64Calls() []ShadowTypesMockShadowInt64Call {
	var calls []ShadowTypesMockShadowInt64Call
	mock.lockShadowInt64.RLock()
	calls = mock.calls.ShadowInt64
	mock.lockShadowInt64.RUnlock()
	return calls
}

// ShadowInt8 calls ShadowInt8Func.
func (mock *ShadowTypesMock) ShadowInt8(n int8, int8MoqParam types.Int8) {
	if mock.ShadowInt8Func == nil {
		panic("ShadowTypesMock.ShadowInt8Func: method is nil but ShadowTypes.ShadowInt8 was just called")
	}
	callInfo := ShadowTypesMockShadowInt8Call{
		N:            n,
		Int8MoqParam: int8MoqParam,
	}
	mock.lockShadowInt8.Lock()
	mock.calls.ShadowInt8 = append(mock.calls.ShadowInt8, callInfo)
	mock.lockShadowInt8.Unlock()
	mock.ShadowInt8Func(n, int8MoqParam)
}

// ShadowTypesMockShadowInt8Call holds details about calls to the ShadowInt8 method.
type ShadowTypesMockShadowInt8Call struct {
	// N is the n argument value.
	N int8
	// Int8MoqParam is the int8MoqParam argument value.
	Int8MoqParam types.Int8
}

// ShadowInt8Calls gets all the calls that were made to ShadowInt8.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowInt8Calls())
func (mock *ShadowTypesMock) ShadowInt8Calls() []ShadowTypesMockShadowInt8Call {
	var calls []ShadowTypesMockShadowInt8Call
	mock.lockShadowInt8.RLock()
	calls = mock.calls.ShadowInt8
	mock.lockShadowInt8.RUnlock()
	return calls
}

// ShadowRune calls ShadowRuneFunc.
func (mock *ShadowTypesMock) ShadowRune(n rune, runeMoqParam types.Rune) {
	if mock.ShadowRuneFunc == nil {
		panic("ShadowTypesMock.ShadowRuneFunc: method is nil but ShadowTypes.ShadowRune was just called")
	}
	callInfo := ShadowTypesMockShadowRuneCall{
		N:            n,
		RuneMoqParam: runeMoqParam,
	}
	mock.lockShadowRune.Lock()
	mock.calls.ShadowRune = append(mock.calls.ShadowRune, callInfo)
	mock.lockShadowRune.Unlock()
	mock.ShadowRuneFunc(n, runeMoqParam)
}

// ShadowTypesMockShadowRuneCall holds details about calls to the ShadowRune method.
type ShadowTypesMockShadowRuneCall struct {
	// N is the n argument value.
	N rune
	// RuneMoqParam is the runeMoqParam argument value.
	RuneMoqParam types.Rune
}

// ShadowRuneCalls gets all the calls that were made to ShadowRune.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowRuneCalls())
func (mock *ShadowTypesMock) ShadowRuneCalls() []ShadowTypesMockShadowRuneCall {
	var calls []ShadowTypesMockShadowRuneCall
	mock.lockShadowRune.RLock()
	calls = mock.calls.ShadowRune
	mock.lockShadowRune.RUnlock()
	return calls
}

// ShadowString calls ShadowStringFunc.
func (mock *ShadowTypesMock) ShadowString(s string, stringMoqParam types.String) {
	if mock.ShadowStringFunc == nil {
		panic("ShadowTypesMock.ShadowStringFunc: method is nil but ShadowTypes.ShadowString was just called")
	}
	callInfo := ShadowTypesMockShadowStringCall{
		S:              s,
		StringMoqParam: stringMoqParam,
	}
	mock.lockShadowString.Lock()
	mock.calls.ShadowString = append(mock.calls.ShadowString, callInfo)
	mock.lockShadowString.Unlock()
	mock.ShadowStringFunc(s, stringMoqParam)
}

// ShadowTypesMockShadowStringCall holds details about calls to the ShadowString method.
type ShadowTypesMockShadowStringCall struct {
	// S is the s argument value.
	S string
	// StringMoqParam is the stringMoqParam argument value.
	StringMoqParam types.String
}

// ShadowStringCalls gets all the calls that were made to ShadowString.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowStringCalls())
func (mock *ShadowTypesMock) ShadowStringCalls() []ShadowTypesMockShadowStringCall {
	var calls []ShadowTypesMockShadowStringCall
	mock.lockShadowString.RLock()
	calls = mock.calls.ShadowString
	mock.lockShadowString.RUnlock()
	return calls
}

// ShadowUint calls ShadowUintFunc.
func (mock *ShadowTypesMock) ShadowUint(v uint, uintMoqParam types.Uint) {
	if mock.ShadowUintFunc == nil {
		panic("ShadowTypesMock.ShadowUintFunc: method is nil but ShadowTypes.ShadowUint was just called")
	}
	callInfo := ShadowTypesMockShadowUintCall{
		V:            v,
		UintMoqParam: uintMoqParam,
	}
	mock.lockShadowUint.Lock()
	mock.calls.ShadowUint = append(mock.calls.ShadowUint, callInfo)
	mock.lockShadowUint.Unlock()
	mock.ShadowUintFunc(v, uintMoqParam)
}

// ShadowTypesMockShadowUintCall holds details about calls to the ShadowUint method.
type ShadowTypesMockShadowUintCall struct {
	// V is the v argument value.
	V uint
	// UintMoqParam is the uintMoqParam argument value.
	UintMoqParam types.Uint
}

// ShadowUintCalls gets all the calls that were made to ShadowUint.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowUintCalls())
func (mock *ShadowTypesMock) ShadowUintCalls() []ShadowTypesMockShadowUintCall {
	var calls []ShadowTypesMockShadowUintCall
	mock.lockShadowUint.RLock()
	calls = mock.calls.ShadowUint
	mock.lockShadowUint.RUnlock()
	return calls
}

// ShadowUint16 calls ShadowUint16Func.
func (mock *ShadowTypesMock) ShadowUint16(v uint16, uint16MoqParam types.Uint16) {
	if mock.ShadowUint16Func == nil {
		panic("ShadowTypesMock.ShadowUint16Func: method is nil but ShadowTypes.ShadowUint16 was just called")
	}
	callInfo := ShadowTypesMockShadowUint16Call{
		V:              v,
		Uint16MoqParam: uint16MoqParam,
	}
	mock.lockShadowUint16.Lock()
	mock.calls.ShadowUint16 = append(mock.calls.ShadowUint16, callInfo)
	mock.lockShadowUint16.Unlock()
	mock.ShadowUint16Func(v, uint16MoqParam)
}

// ShadowTypesMockShadowUint16Call holds details about calls to the ShadowUint16 method.
type ShadowTypesMockShadowUint16Call struct {
	// V is the v argument value.
	V uint16
	// Uint16MoqParam is the uint16MoqParam argument value.
	Uint16MoqParam types.Uint16
}

// ShadowUint16Calls gets all the calls that were made to ShadowUint16.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowUint16Calls())
func (mock *ShadowTypesMock) ShadowUint16Calls() []ShadowTypesMockShadowUint16Call {
	var calls []ShadowTypesMockShadowUint16Call
	mock.lockShadowUint16.RLock()
	calls = mock.calls.ShadowUint16
	mock.lockShadowUint16.RUnlock()
	return calls
}

// ShadowUint32 calls ShadowUint32Func.
func (mock *ShadowTypesMock) ShadowUint32(v uint32, uint32MoqParam types.Uint32) {
	if mock.ShadowUint32Func == nil {
		panic("ShadowTypesMock.ShadowUint32Func: method is nil but ShadowTypes.ShadowUint32 was just called")
	}
	callInfo := ShadowTypesMockShadowUint32Call{
		V:              v,
		Uint32MoqParam: uint32MoqParam,
	}
	mock.lockShadowUint32.Lock()
	mock.calls.ShadowUint32 = append(mock.calls.ShadowUint32, callInfo)
	mock.lockShadowUint32.Unlock()
	mock.ShadowUint32Func(v, uint32MoqParam)
}

// ShadowTypesMockShadowUint32Call holds details about calls to the ShadowUint32 method.
type ShadowTypesMockShadowUint32Call struct {
	// V is the v argument value.
	V uint32
	// Uint32MoqParam is the uint32MoqParam argument value.
	Uint32MoqParam types.Uint32
}

// ShadowUint32Calls gets all the calls that were made to ShadowUint32.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowUint32Calls())
func (mock *ShadowTypesMock) ShadowUint32Calls() []ShadowTypesMockShadowUint32Call {
	var calls []ShadowTypesMockShadowUint32Call
	mock.lockShadowUint32.RLock()
	calls = mock.calls.ShadowUint32
	mock.lockShadowUint32.RUnlock()
	return calls
}

// ShadowUint64 calls ShadowUint64Func.
func (mock *ShadowTypesMock) ShadowUint64(v uint64, uint64MoqParam types.Uint64) {
	if mock.ShadowUint64Func == nil {
		panic("ShadowTypesMock.ShadowUint64Func: method is nil but ShadowTypes.ShadowUint64 was just called")
	}
	callInfo := ShadowTypesMockShadowUint64Call{
		V:              v,
		Uint64MoqParam: uint64MoqParam,
	}
	mock.lockShadowUint64.Lock()
	mock.calls.ShadowUint64 = append(mock.calls.ShadowUint64, callInfo)
	mock.lockShadowUint64.Unlock()
	mock.ShadowUint64Func(v, uint64MoqParam)
}

// ShadowTypesMockShadowUint64Call holds details about calls to the ShadowUint64 method.
type ShadowTypesMockShadowUint64Call struct {
	// V is the v argument value.
	V uint64
	// Uint64MoqParam is the uint64MoqParam argument value.
	Uint64MoqParam types.Uint64
}

// ShadowUint64Calls gets all the calls that were made to ShadowUint64.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowUint64Calls())
func (mock *ShadowTypesMock) ShadowUint64Calls() []ShadowTypesMockShadowUint64Call {
	var calls []ShadowTypesMockShadowUint64Call
	mock.lockShadowUint64.RLock()
	calls = mock.calls.ShadowUint64
	mock.lockShadowUint64.RUnlock()
	return calls
}

// ShadowUint8 calls ShadowUint8Func.
func (mock *ShadowTypesMock) ShadowUint8(v uint8, uint8MoqParam types.Uint8) {
	if mock.ShadowUint8Func == nil {
		panic("ShadowTypesMock.ShadowUint8Func: method is nil but ShadowTypes.ShadowUint8 was just called")
	}
	callInfo := ShadowTypesMockShadowUint8Call{
		V:             v,
		Uint8MoqParam: uint8MoqParam,
	}
	mock.lockShadowUint8.Lock()
	mock.calls.ShadowUint8 = append(mock.calls.ShadowUint8, callInfo)
	mock.lockShadowUint8.Unlock()
	mock.ShadowUint8Func(v, uint8MoqParam)
}

// ShadowTypesMockShadowUint8Call holds details about calls to the ShadowUint8 method.
type ShadowTypesMockShadowUint8Call struct {
	// V is the v argument value.
	V uint8
	// Uint8MoqParam is the uint8MoqParam argument value.
	Uint8MoqParam types.Uint8
}

// ShadowUint8Calls gets all the calls that were made to ShadowUint8.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowUint8Calls())
func (mock *ShadowTypesMock) ShadowUint8Calls() []ShadowTypesMockShadowUint8Call {
	var calls []ShadowTypesMockShadowUint8Call
	mock.lockShadowUint8.RLock()
	calls = mock.calls.ShadowUint8
	mock.lockShadowUint8.RUnlock()
	return calls
}

// ShadowUintptr calls ShadowUintptrFunc.
func (mock *ShadowTypesMock) ShadowUintptr(v uintptr, uintptrMoqParam types.Uintptr) {
	if mock.ShadowUintptrFunc == nil {
		panic("ShadowTypesMock.ShadowUintptrFunc: method is nil but ShadowTypes.ShadowUintptr was just called")
	}
	callInfo := ShadowTypesMockShadowUintptrCall{
		V:               v,
		UintptrMoqParam: uintptrMoqParam,
	}
	mock.lockShadowUintptr.Lock()
	mock.calls.ShadowUintptr = append(mock.calls.ShadowUintptr, callInfo)
	mock.lockShadowUintptr.Unlock()
	mock.ShadowUintptrFunc(v, uintptrMoqParam)
}

// ShadowTypesMockShadowUintptrCall holds details about calls to the ShadowUintptr method.
type ShadowTypesMockShadowUintptrCall struct {
	// V is the v argument value.
	V uintptr
	// UintptrMoqParam is the uintptrMoqParam argument value.
	UintptrMoqParam types.Uintptr
}

// ShadowUintptrCalls gets all the calls that were made to ShadowUintptr.
// Check the length with:
//
//	len(mockedShadowTypes.ShadowUintptrCalls())
func (mock *ShadowTypesMock) ShadowUintptrCalls() []ShadowTypesMockShadowUintptrCall {
	var calls []ShadowTypesMockShadowUintptrCall
	mock.lockShadowUintptr.RLock()
	calls = mock.calls.ShadowUintptr
	mock.lockShadowUintptr.RUnlock()
	return calls
}
